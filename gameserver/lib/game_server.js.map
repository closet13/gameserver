{"version":3,"sources":["../src/game_server.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAI,aAAa,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC,aAAa,CAAC;AAC9E,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACpC,IAAI,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACpC,IAAI,IAAI,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC;AACzD,IAAI,QAAQ,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC,QAAQ,CAAC;AAC/D,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAChC,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACxC,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC;;IAEzC,UAAU;cAAV,UAAU;;AACD,aADT,UAAU,CACA,MAAM,EAAE;8BADlB,UAAU;;AAER,mCAFF,UAAU,6CAEA;;AAER,YAAI,CAAC,OAAO,GAAG;AACX,gBAAI,EAAE,cAAc;AACpB,oBAAQ,EAAE,WAAW;AACrB,uBAAW,EAAE,mBAAmB;AAChC,cAAE,EAAE,eAAe;AACnB,gBAAI,EAAE,IAAI;AACV,oBAAQ,EAAE,IAAI;AACd,0BAAc,EAAE,uBAAuB;AACvC,kCAAsB,EAAE,mBAAmB;AAC3C,oCAAwB,EAAE,oBAAoB;AAC9C,oBAAQ,EAAE,2EAA2E;AACrF,0BAAc,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE;AACjD,sBAAU,EAAE,GAAG;AACf,iBAAK,EAAE,sCAAsC;AAC7C,4BAAgB,EAAE,gBAAgB;SACrC,CAAC;AACF,YAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAClB,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC5C,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,YAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,YAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAChD,YAAI,CAAC,SAAS,EAAE,CAAC;AACjB,YAAI,CAAC,YAAY,EAAE,CAAC;KACvB;;iBA5BC,UAAU;;eA8BM,8BAAG;;;AACjB,mBAAO,CACF,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CACtE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAClB,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAI;AACd,oBAAI,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,KAC5B;AACD,wBAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;AACpB,wBAAI,IAAI,CAAC,MAAM,IAAI,OAAO,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,EAAE;AACpD,8BAAK,IAAI,CAAC,QAAQ,CAAC,CAAA;qBACtB;iBACJ;aACJ,CAAC,CAAC;SACV;;;eAEW,wBAAG;;;AACX,gBAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAK;AAC5B,oBAAI,GAAG,EAAE;AACL,wBAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;iBAC3B,MAAM;AACH,wBAAI,GAAG,GAAG,OAAK,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;AAC3C,uBAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,uBAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;AAClD,wBAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACvC,2BAAK,OAAO,GAAG,IAAI,CAAC;;AAEpB,uBAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACvB,2BAAG,CAAC,IAAI,CAAC;AACL,gCAAI,EAAE,OAAK,OAAO,CAAC,IAAI;AACvB,8BAAE,EAAE,OAAK,OAAO,CAAC,EAAE;yBACtB,CAAC,CAAC;qBACN,CAAC,CAAC;AACH,uBAAG,CAAC,GAAG,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC3B,2BAAG,CAAC,IAAI,CAAC,IAAI,GAAG,OAAK,IAAI,CAAC;AAC1B,2BAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qBACtB,CAAC,CAAC;;AAEH,uBAAG,CAAC,GAAG,CAAC,eAAe,EAAE,UAAC,GAAG,EAAE,GAAG;+BAAG,OAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;qBAAA,CAAC,CAAC;AAC3D,uBAAG,CAAC,GAAG,CAAC,cAAc,EAAE,UAAC,GAAG,EAAE,GAAG;+BAAG,OAAK,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;qBAAA,CAAC,CAAC;;AAGzD,wBAAI,CAAC,MAAM,CAAC,OAAK,OAAO,CAAC,IAAI,EAAE,YAAM;AACjC,+BAAK,MAAM,CAAC,IAAI,CAAC,iBAAiB,GAAG,OAAK,OAAO,CAAC,IAAI,CAAC,CAAC;AACxD,+BAAK,kBAAkB,EAAE,CAAC;qBAC7B,CAAC,CAAC;;;AAIH,2BAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,QAAM,CAAC;iBAE5C;aACJ,CAAC,CAAC;SAEN;;;eAEI,eAAC,GAAG,EAAE,GAAG,EAAE;;;AACZ,gBAAI,MAAM,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;AAC7B,gBAAI,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;AACxD,oBAAI,CAAC,OAAO,CAAC,OAAO,EAAE,UAAC,GAAG,EAAI;AAC1B,wBAAI,GAAG,EAAE;AACL,4BAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;qBAC3B,MACI;AACD,+BAAK,IAAI,GAAG,IAAI,CAAC;AACjB,+BAAK,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;AAG7B,+BAAK,IAAI,CAAC,OAAO,CAAC,CAAC;qBACtB;iBACJ,CAAC,CAAC;aAGN,MAAM;;AAEH,sBAAM,CAAC,OAAO,GAAG,KAAK,CAAC;aAC1B;AACD,eAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpB;;;eAEG,cAAC,GAAG,EAAE,GAAG,EAAE;;;AACX,gBAAI,MAAM,GAAG,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;AAC7B,gBAAI,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;AACxD,oBAAI,CAAC,OAAO,CAAC,MAAM,EAAE,UAAC,GAAG,EAAI;AACzB,wBAAI,GAAG,EAAE;AACL,4BAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;qBAC3B,MACI;AACD,+BAAK,IAAI,GAAG,KAAK,CAAC;AAClB,+BAAK,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;AAG7B,+BAAK,IAAI,CAAC,MAAM,CAAC,CAAC;qBACrB;iBACJ,CAAC,CAAC;aACN,MAAM;;AAEH,sBAAM,CAAC,OAAO,GAAG,KAAK,CAAC;aAC1B;AACD,eAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpB;;;eAEQ,qBAAG;AACR,gBAAI,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAChD,gBAAI,CAAC,GAAG,GAAG,EAAE,CAAC;AACd,gBAAI,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;AACtC,wBAAQ,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC;AACxC,qBAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;AACrB,oBAAI,EAAE,EAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAC;aACrD,CAAC,CAAC;;AAEH,gBAAI,CAAC,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;SACxF;;;eAEY,uBAAC,MAAM,EAAE,CAAC,EAAE;AACrB,gBAAI,IAAI,GAAG,SAAS,CAAC;;AAErB,aAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,CAAC,EAAE,CAAC,EAAI;AAC9B,iBAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;aACzB,CAAC,CAAC;SACN;;;eAEa,wBAAC,cAAc,EAAE;AAC3B,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACnC,gBAAI,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC;AAC/D,0BAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACrC,gBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,WAAW,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;SAC7G;;;WA5JC,UAAU;GAAS,aAAa;;AAgKtC,MAAM,CAAC,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC","file":"game_server.js","sourcesContent":["var EventEmitter3 = require(\"./../../sharedcode/eventemitter3\").EventEmitter3;\nvar extend = require('util-extend');\nvar request = require('superagent');\nvar fail = require('./../../sharedcode/failmodule').Fail;\nvar DBEngine = require('./../../sharedcode/dbengine').DBEngine;\nvar uuid = require('node-uuid');\nvar _ = require('lodash');\nvar bodyParser = require('body-parser');\nvar Logger = require('./engine/logger').Logger;\n\nclass GameServer extends EventEmitter3 {\n    constructor(config) {\n        super();\n\n        this._config = {\n            name: 'gameserver 1',\n            location: 'Argentina',\n            description: 'Firs game server!',\n            ip: '192.168.1.106',\n            port: 3001,\n            protocol: 'ws',\n            loginServerUrl: 'http://127.0.0.1:3000',\n            loginServerUrlRegister: '/servers/register',\n            loginServerUrlCheckToken: '/users/check_token',\n            password: 'fad4a46b-dbdd-4ade-a62e-c071bf75e476-10aec1ba-895d-4ce2-a81a-6a0f6bd792c0',\n            serverPassword: uuid.v4() + uuid.v4() + uuid.v4(), //don't change!\n            maxPlayers: 100,\n            dbUrl: 'mongodb://localhost:27017/GameServer',\n            dbCollectionName: 'GameServer3001'\n        };\n        this.open = false;\n        this._config = extend(this._config, config);\n        this._players = [];\n        this._plugins = [];\n        this.plugins = {};\n        this.logger = new Logger(this.constructor.name);\n        this.connectDB();\n        this.createServer();\n    }\n\n    connectLoginServer() {\n        request\n            .put(this._config.loginServerUrl + this._config.loginServerUrlRegister)\n            .send(this._config)\n            .end((err, res)=> {\n                if (err) fail.emit('error', err);\n                else {\n                    let body = res.body;\n                    if (body.result == 'added' || body.result == 'updated') {\n                        this.emit('create')\n                    }\n                }\n            });\n    }\n\n    createServer() {\n        this.emitpre('create', (err) => {\n            if (err) {\n                fail.emit('error', err);\n            } else {\n                var app = this._app = require('express')();\n                app.use(bodyParser.json());\n                app.use(bodyParser.urlencoded({extended: false}));\n                var http = require('http').Server(app);\n                this._server = http;\n\n                app.get('/', (req, res) => {\n                    res.json({\n                        port: this._config.port,\n                        ip: this._config.ip\n                    });\n                });\n                app.put('/ping', (req, res) => {\n                    req.body.open = this.open;\n                    res.json(req.body);\n                });\n\n                app.put('/server/start', (req, res)=>this.start(req, res));\n                app.put('/server/stop', (req, res)=>this.stop(req, res));\n\n\n                http.listen(this._config.port, () => {\n                    this.logger.info('listening on *:' + this._config.port);\n                    this.connectLoginServer();\n                });\n\n\n                //require('./engine.player').Player\n                require('./engine/socket').Sockets(this);\n\n            }\n        });\n\n    }\n\n    start(req, res) {\n        var result = {started: true};\n        if (req.body.serverPassword == this._config.serverPassword) {\n            this.emitpre('start', (err)=> {\n                if (err) {\n                    fail.emit('error', err);\n                }\n                else {\n                    this.open = true;\n                    this.logger.info('started!');\n                    //create socket server.\n\n                    this.emit('start');\n                }\n            });\n\n\n        } else {\n\n            result.started = false;\n        }\n        res.json(result);\n    }\n\n    stop(req, res) {\n        var result = {stopped: true};\n        if (req.body.serverPassword == this._config.serverPassword) {\n            this.emitpre('stop', (err)=> {\n                if (err) {\n                    fail.emit('error', err);\n                }\n                else {\n                    this.open = false;\n                    this.logger.info('stopped!');\n                    //stop socket server, disconnect users.\n\n                    this.emit('stop');\n                }\n            });\n        } else {\n\n            result.stopped = false;\n        }\n        res.json(result);\n    }\n\n    connectDB() {\n        var dbengine = new DBEngine(this._config.dbUrl);\n        this._db = {};\n        var userPlayer = dbengine.mongoose.Schema({\n            username: {type: String, required: true},\n            token: {type: String},\n            meta: {type: dbengine.mongoose.Schema.Types.Mixed}\n        });\n\n        this._db.Player = dbengine.mongoose.model(this._config.dbCollectionName, userPlayer);\n    }\n\n    triggerPlugin(evName, d) {\n        let args = arguments;\n        //this.logger.debug(evName);\n        _.forEach(this._plugins, (p, i)=> {\n            p.emit.apply(p, args);\n        });\n    }\n\n    registerPlugin(pluginInstance) {\n        this._plugins.push(pluginInstance);\n        this.plugins[pluginInstance.constructor.name] = pluginInstance;\n        pluginInstance.emit('enabled', this);\n        this.logger.info(pluginInstance.constructor.name + ' ' + pluginInstance.constructor.version + ' enabled');\n    }\n\n}\n\nmodule.exports.GameServer = GameServer;"]}