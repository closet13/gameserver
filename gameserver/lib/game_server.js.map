{"version":3,"sources":["../src/game_server.js"],"names":[],"mappings":"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","file":"game_server.js","sourcesContent":["var EventEmitter3 = require(\"./../../sharedcode/eventemitter3\").EventEmitter3;\r\nvar extend = require('util-extend');\r\nvar request = require('superagent');\r\nvar fail = require('./../../sharedcode/failmodule').Fail;\r\nvar DBEngine = require('./../../sharedcode/dbengine').DBEngine;\r\nvar uuid = require('node-uuid');\r\nvar _ = require('lodash');\r\nvar bodyParser = require('body-parser');\r\nvar Logger = require('./engine/logger').Logger;\r\n\r\nclass GameServer extends EventEmitter3 {\r\n    constructor(config) {\r\n        super();\r\n\r\n        this._config = {\r\n            name: 'gameserver 1',\r\n            location: 'Argentina',\r\n            description: 'Firs game server!',\r\n            ip: '192.168.1.106',\r\n            port: 3001,\r\n            protocol: 'ws',\r\n            loginServerUrl: 'http://127.0.0.1:3000',\r\n            loginServerUrlRegister: '/servers/register',\r\n            loginServerUrlCheckToken: '/users/check_token',\r\n            password: 'fad4a46b-dbdd-4ade-a62e-c071bf75e476-10aec1ba-895d-4ce2-a81a-6a0f6bd792c0',\r\n            serverPassword: uuid.v4() + uuid.v4() + uuid.v4(), //don't change!\r\n            maxPlayers: 100,\r\n            dbUrl: 'mongodb://localhost:27017/GameServer',\r\n            dbCollectionName: 'GameServer3001'\r\n        };\r\n        this.open = false;\r\n        this._config = extend(this._config, config);\r\n        this._players = [];\r\n        this._plugins = [];\r\n        this.plugins = {};\r\n        this.logger = new Logger(this.constructor.name);\r\n        this.connectDB();\r\n        this.createServer();\r\n    }\r\n\r\n    connectLoginServer() {\r\n        request\r\n            .put(this._config.loginServerUrl + this._config.loginServerUrlRegister)\r\n            .send(this._config)\r\n            .end((err, res)=> {\r\n                if (err) fail.emit('error', err);\r\n                else {\r\n                    let body = res.body;\r\n                    if (body.result == 'added' || body.result == 'updated') {\r\n                        this.emit('create')\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    createServer() {\r\n        this.emitpre('create', (err) => {\r\n            if (err) {\r\n                fail.emit('error', err);\r\n            } else {\r\n                var app = this._app = require('express')();\r\n                app.use(bodyParser.json());\r\n                app.use(bodyParser.urlencoded({extended: false}));\r\n                var http = require('http').Server(app);\r\n                this._server = http;\r\n\r\n                app.get('/', (req, res) => {\r\n                    res.json({\r\n                        port: this._config.port,\r\n                        ip: this._config.ip\r\n                    });\r\n                });\r\n                app.put('/ping', (req, res) => {\r\n                    req.body.open = this.open;\r\n                    res.json(req.body);\r\n                });\r\n\r\n                app.put('/server/start', (req, res)=>this.start(req, res));\r\n                app.put('/server/stop', (req, res)=>this.stop(req, res));\r\n\r\n\r\n                http.listen(this._config.port, () => {\r\n                    this.logger.info('listening on *:' + this._config.port);\r\n                    this.connectLoginServer();\r\n                });\r\n\r\n\r\n                //require('./engine.player').Player\r\n                require('./engine/socket').Sockets(this);\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    start(req, res) {\r\n        var result = {started: true};\r\n        if (req.body.serverPassword == this._config.serverPassword) {\r\n            this.emitpre('start', (err)=> {\r\n                if (err) {\r\n                    fail.emit('error', err);\r\n                }\r\n                else {\r\n                    this.open = true;\r\n                    this.logger.info('started!');\r\n                    //create socket server.\r\n\r\n                    this.emit('start');\r\n                }\r\n            });\r\n\r\n\r\n        } else {\r\n\r\n            result.started = false;\r\n        }\r\n        res.json(result);\r\n    }\r\n\r\n    stop(req, res) {\r\n        var result = {stopped: true};\r\n        if (req.body.serverPassword == this._config.serverPassword) {\r\n            this.emitpre('stop', (err)=> {\r\n                if (err) {\r\n                    fail.emit('error', err);\r\n                }\r\n                else {\r\n                    this.open = false;\r\n                    this.logger.info('stopped!');\r\n                    //stop socket server, disconnect users.\r\n\r\n                    this.emit('stop');\r\n                }\r\n            });\r\n        } else {\r\n\r\n            result.stopped = false;\r\n        }\r\n        res.json(result);\r\n    }\r\n\r\n    connectDB() {\r\n        var dbengine = new DBEngine(this._config.dbUrl);\r\n        this._db = {};\r\n        var userPlayer = dbengine.mongoose.Schema({\r\n            username: {type: String, required: true},\r\n            token: {type: String},\r\n            meta: {type: dbengine.mongoose.Schema.Types.Mixed}\r\n        });\r\n\r\n        this._db.Player = dbengine.mongoose.model(this._config.dbCollectionName, userPlayer);\r\n    }\r\n\r\n    triggerPlugin(evName, d) {\r\n        let args = arguments;\r\n        //this.logger.debug(evName);\r\n        _.forEach(this._plugins, (p, i)=> {\r\n            p.emit.apply(p, args);\r\n        });\r\n    }\r\n\r\n    registerPlugin(pluginInstance) {\r\n        this._plugins.push(pluginInstance);\r\n        this.plugins[pluginInstance.constructor.name] = pluginInstance;\r\n        pluginInstance.emit('enabled', this);\r\n        this.logger.info(pluginInstance.constructor.name + ' ' + pluginInstance.constructor.version + ' enabled');\r\n    }\r\n\r\n}\r\n\r\nmodule.exports.GameServer = GameServer;"]}